#!/usr/bin/perl

# √Ålvaro Castellano Vela <https://github.com/a-castellano>

use v5.20;
use utf8;

use strict;
use warnings;

use LWP::UserAgent;
use HTTP::Request;
use HTTP::Response;
use JSON::Parse ':all';
use JSON;
use DateTime;
use DateTime::Format::Strptime qw(  );
use Date::Calc qw/Delta_Days/;
use Try::Tiny;
use Scalar::Util qw(looks_like_number);
use Getopt::Long qw(GetOptions);

use Toggl::Wrapper;

use Data::Dumper;

use constant USER_AGENT       => "toggl-jira-work-logger";
use constant JIRA_API_SUB_URL => "/rest/api/2";

$SIG{INT} = sub { say "Aborted."; exit 0 };

sub make_api_call {
    my $call      = shift;
    my $auth      = $call->{auth};
    my $headers   = $call->{headers};
    my $data      = $call->{data};
    my $json_data = "";
    my $wrapper   = LWP::UserAgent->new(
        agent      => USER_AGENT,
        cookie_jar => {}
    );

    my $request = HTTP::Request->new( $call->{type} => "$call->{url}" );

    $request->authorization_basic( $auth->{email}, $auth->{password} );

    # Headers
    if (@$headers) {
        foreach my $header (@$headers) {
            $request->header(%$header);
        }
    }

    # Data
    $request->content( encode_json $data);

    my $response = $wrapper->request($request);
    if ( $response->is_success ) {
        $response = $response->decoded_content;
        my $json = parse_json($response);
        return $json;
    }
    else {
        my $r       = HTTP::Response->parse( $response->status_line );
        my $code    = $r->code;
        my $message = $r->message;
        if ( $code == 403 ) {
            say "Check your credentaials: API call returned $code: $message";
			exit 1;
        }
        else {
            say "An error ocurred: API call returned $code: $message";
			exit 1;

        }
    }
}

sub work_log {
    my ( $url, $email, $user, $password, $issue_code, $started,
        $time_spent, $comment, $issue_visibility_type, $issue_visibility )
      = @_;

    my %author;
    $author{self} =
      join( '', ( $url, JIRA_API_SUB_URL, '/user?username=', $user ) );

    my %visibility;

    my %data = (
        author    => \%author,
        started   => $started,
        timeSpent => $time_spent,
        comment   => $comment,
    );

    if ( $issue_visibility ne "" ) {
        $visibility{type}  = "$issue_visibility_type";
        $visibility{value} = "$issue_visibility";
        $data{visibility}  = \%visibility;
    }

    my $response;

    $response = make_api_call(
        {
            type => 'POST',
            url  => join( '',
                ( $url, JIRA_API_SUB_URL, '/issue/', $issue_code, '/worklog' )
            ),
            auth => {
                email    => $email,
                password => $password,
            },
            headers => [
                { 'Content-Type' => 'application/json; charset=utf-8' },
                { 'Accept'       => 'application/json; charset=utf-8' },
            ],
            data => \%data,
        }
    );

}

sub process_time_entries {

    my $entries         = shift;
    my $visibility_type = shift;
    my $visibility      = shift;
    my $toggl           = shift;
    my $rounded_time    = shift;

    my @entries = @{$entries};

    my %total_work_by_issue;
    my @processed_entries;

    for my $entry (@entries) {

        if (
            $entry->{duration} >= 300    # Ignore entries brief than 5 minutes
            and (
                !exists $entry->{tags}    # And entries already logged
                or grep { $_ ne "logged" } @{ $entry->{tags} }
            )
            and exists $entry->{description}
          )
        {

            if ( $entry->{description} =~ /^\s*([A-Z0-9]+-[0-9]+)/ ) {
                my $issue_id = $1;

                my $duration = int( $entry->{'duration'} / 60 );

                if ( !exists $total_work_by_issue{$issue_id} ) {
                    $total_work_by_issue{$issue_id} = { total_time => 0 };
                }
                $total_work_by_issue{$issue_id}{total_time} += $duration;

                # Shows entry info to user
                say "Issue $entry->{description}";
                if ( grep { $_ eq "errored" } @{ $entry->{tags} } ) {
                    say
"\t** ERRORED: This issue was already tried to be registered but it failed. **";
                }
                say "\tStarted at $entry->{start}.";
                say "\tEnded at $entry->{stop}.";
                say "\tWith the following duration: $duration minutes.";

                # User must specify what he/she did in every time entry
                my $description = "";
                do {
                    print "\tWhat did you do? -> ";
                    $description = <STDIN>;
                    say "";
                    if ( $description =~ /^\s*$/ ) {
                        say
"\nYou Must provide a description for each time entry!\n";
                    }
                } while ( $description =~ /^\s*$/ );

                say
"\tSet visibility (default is $visibility_type $visibility)";
                my $issue_visibility_type = "";
                do {
                    print
"\tRole or group (leave empty if you do not want to change it):";
                    $issue_visibility_type = <STDIN>;
                    chomp $issue_visibility_type;
                    say "";
                  } while ( $issue_visibility_type ne ""
                    && $issue_visibility_type ne "group"
                    && $issue_visibility_type ne "role" );
                print
"\tRole or group name (leave empty if you do not want to change it):";
                my $issue_visibility = <STDIN>;
                chomp $issue_visibility_type;
                chomp $issue_visibility;
                if ( $issue_visibility_type =~ /^\s*$/ ) {
                    $issue_visibility_type = $visibility_type;
                }
                if ( $issue_visibility_type eq "" ) {
                    $issue_visibility_type = "";
                }

                if ( $issue_visibility =~ /^\s*$/ ) {
                    $issue_visibility = $visibility;
                }
                if (    $issue_visibility eq "public"
                    and $issue_visibility_type eq "" )
                {
                    $issue_visibility = "";
                }

                # Set time entries duration in full minutes
                $toggl->update_time_entry( $entry,
                    { duration => $duration * 60 } );

                push(
                    @processed_entries,
                    {
                        issue_id => $issue_id,
                        started  => $entry->{start} =~
                          s/\+(\d\d):(\d\d$)/\.0\+$1$2/gr,
                        duration              => $duration,
                        description           => $description,
                        time_entry            => $entry,
                        id                    => $entry->{id},
                        tags                  => \@{ $entry->{tags} },
                        issue_visibility_type => $issue_visibility_type,
                        issue_visibility      => $issue_visibility
                    }
                );
                say "";

            }
        }
    }

    #Round time if needed
    foreach my $key ( keys %total_work_by_issue ) {
        my $extra_time = 0;

        # Total time in entry group must be rounded.
        if ( $rounded_time > 0 ) {
            if ( $total_work_by_issue{$key}{total_time} % $rounded_time != 0 ) {
                $extra_time = (
                    int(
                        $total_work_by_issue{$key}{total_time} / $rounded_time
                    ) + 1
                  ) * $rounded_time -
                  $total_work_by_issue{$key}{total_time};
            }
        }
        foreach my $entry (@processed_entries) {

            # If entry has not been tagged as 'errored'
            # It was already been rounded if needed.
            if ( !( grep { $_ eq "errored" } @{ $entry->{tags} } ) ) {
                if ( $entry->{issue_id} eq $key ) {
                    $entry->{duration} += $extra_time;

                   # After updating entry duration, modify rgistered toggl entry
                   # Time entry duration must be specified in secondss
                    $toggl->update_time_entry( $entry->{time_entry},
                        { duration => $entry->{duration} * 60 } );
                    last;
                }

            }
        }
    }

    return @processed_entries;

}

sub log_entries {

    my $processed_entries = shift;
    my $toggl             = shift;
    my $jira_url          = shift;
    my $jira_email        = shift;
    my $jira_user         = shift;
    my $jira_password     = shift;

    my @processed_entries = @{$processed_entries};

    my @entry_ids;
    my @failed_ids;
    foreach my $entry (@processed_entries) {
        my $no_errors = 0;
        try {
            work_log(
                $jira_url,                       $jira_email,
                $jira_user,                      $jira_password,
                $entry->{issue_id},              $entry->{started},
                $entry->{duration},              $entry->{description},
                $entry->{issue_visibility_type}, $entry->{issue_visibility}
            );
            $no_errors = 1;
        }
        catch {
            warn
"Detected and error in $entry->{issue_id}: $_ \n\tThis error has been registered in your toggl dashboard.";
            $no_errors = 0;
            push( @failed_ids, int( $entry->{id} ) );
        };
        if ($no_errors) {
            push( @entry_ids, int( $entry->{id} ) );
        }
    }

    print "Done.\n";
    if ( scalar(@entry_ids) > 0 ) {
        $toggl->bulk_update_time_entries_tags(
            {
                time_entry_ids => \@entry_ids,
                tags           => ["logged"],
                tag_action     => "add",
            }
        );
    }
    if ( scalar(@failed_ids) > 0 ) {
        $toggl->bulk_update_time_entries_tags(
            {
                time_entry_ids => \@failed_ids,
                tags           => ["errored"],
                tag_action     => "add",
            }
        );
    }

}

sub usage {

    my $usage = <<'EOF';

toggl-jira-work-logger

Utility to log work into Jira issues using Toggl recorded time entries.

Usage:

    toggl-jira-work-logger --start-date=DATE --end-date=DATE [ARGUMENTS]

For avoiding user to wirte thier secret credentials in the command line
this script will look for config variables in shell environment. All variables
except start-date and end-data can be set as environment variables.

Arguments:

	--jira-url=https://yourorganizarion.atlassian.net
	--jira-email=your-email@example.com
	--jira-user=your-jira-user
	--jira-password=your-jira-password
	--toggl-api-token=your-jira-api-token
	--rounded-time=minutes
	--visibility-owner=group-or-role             Visibility is public by default.
	--visibility-owner-name=group-or-role-name   When visibility-owner is set

Required arguments are:

	jira-url
	jira-email
	jira-user
	jira-password
	toggl-api-token

Rules:

	visibility-owner can only be set with group or role value

	rounded-time -> Forces a group of time entries under the same day and name sum a total time multiple of rounded-time value

Environment variable names:

	This script does not look for a variable called jira-url, it looks for uppercase with lowslash as separator names.

	So, environment variable for jira-url would be JIRA_URL

More info can be found at https://git.windmaker.net/a-castellano/toggl-jira-work-logger
EOF

    say $usage;

    exit 255;
}

sub get_variables {

    my $required_variables_not_provided = 0;
    my $help                            = undef;

    my $variables = {
        'jira-url'              => $ENV{'JIRA_URL'},
        'jira-email'            => $ENV{'JIRA_EMAIL'},
        'jira-user'             => $ENV{'JIRA_USER'},
        'jira-password'         => $ENV{'JIRA_PASSWORD'},
        'toggl-api-token'       => $ENV{'TOGGL_API_KEY'},
        'rounded-time'          => $ENV{'ROUNDED_TIME'},
        'visibility-owner'      => $ENV{'VISIBILITY_OWNER'},
        'visibility-owner-name' => $ENV{'VISIBILITY_OWNER_NAME'},
        'start-date'            => undef,
        'end-date'              => undef,
    };

    # Getopts

    GetOptions(
        'jira-url=s'              => \$variables->{'jira-url'},
        'jira-email=s'            => \$variables->{'jira-email'},
        'jira-user=s'             => \$variables->{'jira-user'},
        'jira-password=s'         => \$variables->{'jira-password'},
        'toggl-api-token=s'       => \$variables->{'toggl-api-token'},
        'rounded-time=i'          => \$variables->{'rounded-time'},
        'visibility-owner=s'      => \$variables->{'visibility-owner'},
        'visibility-owner-name=s' => \$variables->{'visibility-owner-name'},
        'start-date=s'            => \$variables->{'start-date'},
        'end-date=s'              => \$variables->{'end-date'},
        'today'              => \$variables->{'today'},
        'week'              => \$variables->{'week'},
        'month'              => \$variables->{'month'},
        'help'                    => \$help,
    ) or ( say "Inavid options. Run $0 --help for usage." and exit 2 );

    if ( defined($help) ) {
        usage();
    }

    # Check if special dates are defined
	my $test = (defined $variables->{'today'}) + (defined $variables->{'week'});
	say $test;
	if (((defined $variables->{'today'}) + (defined $variables->{'week'}) + (defined $variables->{month})) > 1)
	{
            say "Using more than one special date (today, week, month) is not allowed.";
			exit -1;
	}
	else{
	if ((defined $variables->{'today'}) xor (defined $variables->{'week'}) xor (defined $variables->{'month'})){

		if( (defined $variables->{'start-date'}) or (defined $variables->{'end-date'}) ){
			say "Using special date (today, week, month) overrides start-date and end-date".
		}

		if (defined $variables->{'today'}){
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =  localtime();
$variables->{'start-date'} = sprintf("%04d-%02d-%02d",$year+1900,$mon,$mday);
$variables->{'end-date'} = $variables->{'start-date'};
		}
		elsif (defined $variables->{'week'}){

		}
		else{ # month

		}
	}
	}

    # Check required variables
    for my $required_variable (
        'jira-url',        'jira-email',
        'jira-user',       'jira-password',
        'toggl-api-token', 'start-date',
        'end-date'
      )
    {
        if ( !defined( $variables->{$required_variable} ) ) {
            $required_variables_not_provided = 1;
            say "\"$required_variable\" must be defined.";
        }
    }
    if ($required_variables_not_provided) {
        exit 2;
    }

    # Check visibility

    if ( defined $variables->{'visibility-owner'} ) {
        if (   ( $variables->{'visibility-owner'} ne "role" )
            && ( $variables->{'visibility-owner'} ne "group" ) )
        {
            say "visibility-owner must be \"group\" or \"role\".";
            exit 2;
        }
    }
    else {
        $variables->{'visibility-owner-name'} = 'public';
        $variables->{'visibility-owner'}      = '';
    }

    # Check rounded time
    if ( !defined( $variables->{'rounded-time'} ) ) {
        $variables->{'rounded-time'} = 0;
    }

	die Dumper($variables);
exit -1;


    return $variables;
}

#Main

my $variables = get_variables();

my @dates;

# Provided dates must be valid
for my $date ( 'start-date', 'end-date' ) {
    my ( $y, $m, $d ) =
      $variables->{$date} =~ /^([0-9]{4})-([0-1][0-9])-([0-3][0-9])\z/
      or ( say "$date is not a valid data." and exit 2 );

    push(
        @dates,
        DateTime->new(
            year      => $y,
            month     => $m,
            day       => $d,
            time_zone => 'local',
        )
    );
}

my $first_date = $dates[0];
my $last_date  = $dates[1];

if ( DateTime->compare( $first_date, $last_date ) == 1 ) {
    say "Start date cannot be greater than end date.";
    exit 1;
}

if ( !( looks_like_number( $variables->{'rounded-time'} ) ) ) {
    say "Rounded time must be a number.";
    exit 1;
}

my $number_of_days = $last_date->delta_days($first_date)->days();

# Create toggl instance
my $toggl = Toggl::Wrapper->new( api_token => $variables->{'toggl-api-token'} );

my $current_date = $first_date;

# Process entries day by day

do {

    say "Processing entries from ", $current_date->strftime('%Y-%m-%d'), "";

    my $next_date = $current_date->clone()->add( days => 1 );

    my @entries = @{
        $toggl->get_time_entries(
            {
                start => $current_date,
                stop  => $next_date,
            }
        )
    };

    @entries =
      sort { $a->{id} <=> $b->{id} } @entries;

    my @processed_entries = process_time_entries(
        \@entries,
        $variables->{'visibility-owner'},
        $variables->{'visibility-owner-name'},
        $toggl, $variables->{'rounded-time'}
    );

    if ( scalar @processed_entries ) {

        print "Sending Worklogs...";

        log_entries(
            \@processed_entries,       $toggl,
            $variables->{'jira-url'},  $variables->{'jira-email'},
            $variables->{'jira-user'}, $variables->{'jira-password'}
        );

        say "Entries logged.";

    }
    else {
        say "There was no entries for that date.";
    }
    $current_date = $next_date;
} while ( DateTime->compare( $current_date, $last_date ) < 1 );

say "All Done";
